version: '3.8'
services:
  postgres_primary:
    build:
      context: ./db
      dockerfile: Dockerfile
    ports:
      - 5432
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres 
      -c wal_level=replica 
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
      -c log_directory=/tmp/logs/
      -c log_filename=postgresql.log
      -c logging_collector=on
      -c log_replication_commands=on
      -c log_statement=all
    volumes:
      - ./db/00_init.sql:/docker-entrypoint-initdb.d/00_init.sql
      - shared:/tmp/
    env_file:
      - .env
  postgres_replica:
    build:
      context: ./db_repl
      dockerfile: Dockerfile
    user: postgres
    ports:
      - 5433
    environment:
      password: ${DB_REPL_USER}
      PGUSER: ${DB_REPL_USER}
      PGPASSWORD: ${DB_REPL_PASSWORD}
    command: |
      bash -c "
      cp /var/lib/postgresql/data/* /var/lib/postgresql/data2/ -r;
      rm /var/lib/postgresql/data -r;
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=${DB_HOST} --port=${DB_PORT}
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    depends_on: 
      - postgres_primary
  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    depends_on:
      - postgres_primary
    volumes:
      - shared:/tmp/
    env_file:
      - .env
volumes:
   shared:
